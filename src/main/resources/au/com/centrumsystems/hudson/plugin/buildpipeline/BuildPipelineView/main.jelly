<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
	<link href="${rootURL}/plugin/build-pipeline-plugin/css/main.css" type="text/css" rel="stylesheet" />
	<link rel="stylesheet" href="${rootURL}/plugin/build-pipeline-plugin/css/redmond/jquery-ui-1.8.14.custom.css"></link>
	<script type="text/javascript" src="${rootURL}/plugin/build-pipeline-plugin/js/jquery.1.5.1.min.js"></script>
	<script type="text/javascript" src="${rootURL}/plugin/build-pipeline-plugin/js/jquery-ui-1.8.14.custom.min.js"></script>
	<script type="text/javascript" src="${rootURL}/plugin/build-pipeline-plugin/js/handlebars-1.0.0.beta.6.js"></script>
	<script id="build-card-template" type="text/x-handlebars-template">
<table class="build-card rounded {{status}}">
	<tbody>
		<tr class="header">
			<td colspan="2">
				<div>
					<a title="{{title}}">{{title}}</a>
				</div>
			</td>
		</tr>
		<tr class="build-body">
			<td class="build-number">{{buildNumber}}</td>
			<td class="secondary-info">
				<div>{{startDate}}</div>
				<div>{{startTime}}</div>
				{{#if complete}}
				<div>{{duration}}</div>
				{{/if}}
			</td>
		</tr>
		<tr class="build-actions">
			<td colspan="2">
				<div class="status-bar">
					{{#if building}}
						<a href="{{buildUrl}}console">
							<table class="progress-bar" align="center">
								<tbody>
									<tr>
										<td style="width: {{progress}}%" class="progress-bar-done" id="progress-bar-done{{id}}"></td>
										<td style="width: {{progressLeft}}%" class="progress-bar-left" id="progress-bar-left{{id}}"></td>
									</tr>
								</tbody>
							</table>
						</a>
					{{/if}}
					{{#if pending}}
						<a href="{{buildUrl}}console">
							<table class="progress-bar" align="center">
								<tbody>
									<tr>
										<td style="display: none;" class="progress-bar-done" id="progress-bar-done{{id}}"></td>
										<td style="display: none;" class="progress-bar-left" id="progress-bar-left{{id}}"></td>
									</tr>
								</tbody>
							</table>
						</a>
					{{/if}}
				</div>
				<div class="icons">
					<a href="{{buildUrl}}console">
						<img title="console" alt="console" src="{{rootUrl}}/images/16x16/terminal.png" />
					</a>
					<a href="{{buildUrl}}changes">
						<img title="changes" alt="changes" src="{{rootUrl}}/images/16x16/notepad.png" />
					</a>
				</div>
			</td>
		</tr>
	</tbody>
</table>
	</script>
	<script type="text/javascript">	
		jQuery(function(){					
			//hide legend and register on click function to show and hide
			$('#legendView').hide();
			$('#legendLever').click(function() {
				$('#legendView').toggle('blind', {}, 750);
				return false;
			});
			$("button").button({
	            icons: {
	                primary: "trigger"
	            }
	        });		
		});
	
		var BuildPipeline = function(){
			var buildCardTemplateSource = $("#build-card-template").html();
			this.buildCardTemplate = Handlebars.compile(buildCardTemplateSource);
			this.buildProxies = {}
		};
		
		BuildPipeline.prototype = {
			triggerBuild: function(upstreamProjectName, upstreamBuildNumber, triggerProjectName) {
				$('#upstreamProjectName').val(upstreamProjectName);
				$('#upstreamBuildNumber').val(upstreamBuildNumber);
				$('#triggerProjectName').val(triggerProjectName);
				document.pipelineViewForm.action = "manualExecution";
				$('#manualExecutionForm').submit();
			},
			showProgress : function(id, dependencies) {
				var buildPipeline = this;
				var intervalId = setInterval(function(){		    	
					buildPipeline.buildProxies[id].asJSON(function(data){
			    		var build = jQuery.parseJSON(data.responseObject());
			    		console.log(build.status + ", " + build.id + ", " + build.progress);
			    		buildPipeline.updateBuildCardFromJSON(build);
			    		if (build.progress == 0) {
			    			clearInterval(intervalId);
			    			//update current build card
			    			buildPipeline.updateBuildCard(id);
			    			//kick off status tracking for all dependencies
			    			jQuery.each(dependencies, function(){
				    			jQuery("#pipelines").trigger("show-status-" + this);
			    			});
			    		}
			    	});
				}, 5000);
			},
			updateBuildCard : function(id) {
				var buildPipeline = this;
				buildPipeline.buildProxies[id].asJSON(function(data){
					buildPipeline.updateBuildCardFromJSON(jQuery.parseJSON(data.responseObject()));
				});
			},
			updateBuildCardFromJSON : function(buildAsJSON) {
				var buildPipeline = this;
				jQuery("#build-" + buildAsJSON.id).empty();
				jQuery("#build-" + buildAsJSON.id).append(buildPipeline.buildCardTemplate(buildAsJSON));
			},
			updatePipelineBuildAndShowProgress : function(id, nextBuildNumber, dependencies) {
				var buildPipeline = this;
				//try to get the updated build, that's not pending 
				var intervalId = setInterval(function(){
					buildPipeline.buildProxies[id].updatePipelineBuild(nextBuildNumber, function(updated){
						if (updated.responseObject()) {
							buildPipeline.showProgress(id, dependencies);
							clearInterval(intervalId);
						}
					});
				}, 5000);
				
			}
		}
		
		var buildPipeline = new BuildPipeline()		
		
	</script>
	<style>
span.SUCCESS {
	background: url("${rootURL}/images/24x24/blue.png") no-repeat center
		center !important;
}

span.FAILURE {
	background: url("${rootURL}/images/24x24/red.png") no-repeat center
		center;
}

span.UNSTABLE {
	background: url("${rootURL}/images/24x24/yellow.png") no-repeat center
		center;
}

span.BUILDING {
	background: url("${rootURL}/images/24x24/blue_anime.gif") no-repeat
		center center;
}

span.NOT_BUILT {
	background: url("${rootURL}/images/24x24/blue_anime.gif") no-repeat
		center center;
}

span.PENDING {
	background: url("${rootURL}/images/24x24/health-80plus.png") no-repeat
		center center;
}

span.ABORT {
	background: url("${rootURL}/images/24x24/grey.png") no-repeat center
		center;
}

.trigger {
	background: url("${rootURL}/images/16x16/clock.png") no-repeat center
		center !important;
}
</style>
	<!-- <form method="post" action="manualExecution" id="manualExecutionForm">-->
	<form method="post" name="pipelineViewForm" action="" id="manualExecutionForm">
		<input name="upstreamProjectName" id="upstreamProjectName" type="hidden" />
		<input name="upstreamBuildNumber" id="upstreamBuildNumber" type="hidden" />
		<input name="triggerProjectName" id="triggerProjectName" type="hidden" />
		<div id="build-pipeline-plugin-content">
			<div>
				<h1>Build Pipeline View: ${from.getBuildViewTitle()}</h1>
			</div>
			<div>${from.getDescription()}</div>
			<!-- If the user has the Configure View permission include a hyperlink to configure this view.-->
			<j:if test="${from.hasConfigurePermission()}">
				<a href="configure"><img height="24" style="margin: 2px;" alt="" width="24" src="${rootURL}/images/24x24/setting.png" /></a>
				<a href="configure">Configure View</a>
			</j:if>
			<div>
				<!-- If the user has the Build Project permission include a hyperlink to build the base project.-->
				<j:if test="${from.hasSelectedProject()}">
					<j:set var="hasBuildPermission" type="boolean" value="${from.hasBuildPermission(from.getSelectedProject())}" />
					<j:if test="${hasBuildPermission}">
						<a href="${rootURL}/job/${from.getSelectedProject().getName()}/build?delay=0sec"><img height="24" style="margin: 2px;" alt="" width="24" src="${rootURL}/images/24x24/clock.png" /></a>
						<a href="${rootURL}/job/${from.getSelectedProject().getName()}/build?delay=0sec">Start Build of Pipeline for ${from.getSelectedProject().getName()}</a>
					</j:if>
				</j:if>
				<j:if test="${!(from.hasSelectedProject())}">
					<j:set var="hasBuildPermission" type="boolean" value="false" />
				</j:if>
			</div>
			<!-- Hyperlink to show/hide the legend-->
			<div href="#" id="legendLever">
				<a href="#"><img height="24" style="margin: 2px;" alt="" width="24" src="${rootURL}/images/24x24/help.png" class="BuildViewMargin" /></a> <a href="#">View/Hide Build Pipeline Icon Legend</a>
			</div>
			<div id="legendView" class="BuildViewMargin">
				<table cellspacing="5" cellpadding="5">
					<tr>
						<td class="legend rounded" COLSPAN="2">Project Status</td>
						<td class="legend rounded" COLSPAN="2">Build Stability</td>
						<td class="legend rounded">Build Status</td>
					</tr>
					<tr>
						<td><img src="${rootURL}/images/24x24/blue.png" /></td>
						<td>Success</td>
						<td><img src="${rootURL}/images/24x24/health-80plus.png" /></td>
						<td>More than 80&#37;</td>
						<td class="SUCCESS rounded">SUCCESS</td>
					</tr>
					<tr>
						<td><img src="${rootURL}/images/24x24/yellow.png" /></td>
						<td>Unstable</td>
						<td><img src="${rootURL}/images/24x24/health-60to79.png" /></td>
						<td>60-79&#37;</td>
						<td class="UNSTABLE rounded">UNSTABLE</td>
					</tr>
					<tr>
						<td><img src="${rootURL}/images/24x24/red.png" /></td>
						<td>Failure</td>
						<td><img src="${rootURL}/images/24x24/health-40to59.png" /></td>
						<td>40-59&#37;</td>
						<td class="FAILURE rounded">FAILURE</td>
					</tr>
					<tr>
						<td><img src="${rootURL}/images/24x24/grey.png" /></td>
						<td>Abort</td>
						<td><img src="${rootURL}/images/24x24/health-20to39.png" /></td>
						<td>20-39&#37;</td>
						<td class="ABORT rounded">ABORT</td>
					</tr>
					<tr>
						<td><img src="${rootURL}/images/24x24/blue_anime.gif" /></td>
						<td>Building</td>
						<td><img src="${rootURL}/images/24x24/health-00to19.png" /></td>
						<td>Less than 20&#37;</td>
						<td class="NOT_BUILT rounded">BUILDING</td>
					</tr>
					<tr>
						<td></td>
						<td>Pending a build being triggered either manually or automatically.</td>
						<td></td>
						<td></td>
						<td class="PENDING rounded">PENDING</td>
					</tr>
				</table>
			</div>
			<j:if test="${empty(items)}">
				<st:include page="noJob.jelly" />
			</j:if>
			<j:set var="buildPipelineForm" type="au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineForm" value="${from.getBuildPipelineForm()}" />
			<table id="pipelines">
				<j:set var="projectGrid" value="${buildPipelineForm.getProjectGrid()}" />
				<!-- projects -->
				<j:forEach begin="${0}" end="${buildPipelineForm.getGridHeight() - 1}" indexVar="x">
					<tr id='project-pipeline'>
						<!-- 1st cell empty, that's where revision will go for the builds -->
						<td></td>
						<td class="next"></td>
						<j:forEach begin="${0}" end="${buildPipelineForm.getGridWidth() - 1}" indexVar="y">
							<j:set var="project" type="au.com.centrumsystems.hudson.plugin.buildpipeline.ProjectForm" value="${projectGrid.get(x).get(y)}" />
							<j:if test="${project != null}">
								<td>
									<div class="PROJECT rounded">
										<div class="header-name">
											<a href="${project.getUrl()}" title="${project.getName()}"><div>${project.getName()}</div></a>
											<div class="statusImages">
												<span class="status ${project.getResult()}"></span> 
												<span class="status"><img src="${rootURL}/images/24x24/${project.getHealth()}" /></span>
											</div>
										</div>
									</div>
								</td>
								<j:if test="${(y + 1 != buildPipelineForm.getGridWidth())}">
									<td class="next"><j:if test="${!(project.getDependencies().length() == 0)}">
											<span class="status next"> <img src="${rootURL}/images/24x24/next.png" />
											</span>
										</j:if></td>
								</j:if>
							</j:if>
							<j:if test="${project == null}">
								<td></td>
								<j:if test="${y + 1 != buildPipelineForm.getGridWidth()}">
									<j:set var="nextIndex" value="${y + 1}" />
									<td class="next"><j:if test="${projectGrid.get(x).containsKey(nextIndex.intValue())}">
											<span class="status next">
												<img src="${rootURL}/images/24x24/next.png" />
											</span>
										</j:if></td>
								</j:if>
							</j:if>
						</j:forEach>
					</tr>
				</j:forEach>
				<!-- builds -->
				<j:forEach items="${buildPipelineForm.getBuildGrids()}" var="buildGrid" indexVar="i">
					<tbody class="pipelineGroup">
						<j:forEach begin="${0}" end="${buildGrid.keySet().size() - 1}" indexVar="x">
							<tr class='build-pipeline'>
								<td><j:if test="${x == 0}">
										<div class="revision rounded">
											<a href="${buildGrid.get(x).get(0).getUrl()}changes" title="${buildGrid.get(x).get(0).getRevision()}">
												<div>${buildGrid.get(x).get(0).getRevision()}</div>
											</a>
										</div>
									</j:if></td>
								<td class="next"></td>
								<j:forEach begin="${0}" end="${buildPipelineForm.getGridWidth() - 1}" indexVar="y">
									<j:set var="build" type="au.com.centrumsystems.hudson.plugin.buildpipeline.BuildForm" value="${buildGrid.get(x).get(y)}" />
									<j:if test="${build != null}">
										<td id="build-${build.getId()}">
										</td>
										<script>
											//generate build-card 
											var buildData = ${build.asJSON()};
											buildData.rootUrl = "${rootURL}";
											jQuery("#build-${build.getId()}").append(buildPipeline.buildCardTemplate(buildData));
											
											//add build proxy to proxies for future use
											buildPipeline.buildProxies[${build.getId()}] = <st:bind value="${build}" />;
											<j:if test="${build.getStatus() == 'BUILDING'}">
												buildPipeline.showProgress(${build.getId()}, ${build.getDependencyIds()});
											</j:if>
											<j:if test="${build.getStatus() == 'PENDING'}">
												jQuery("#pipelines").bind("show-status-${build.getId()}", function(){
													buildPipeline.updatePipelineBuildAndShowProgress(${build.getId()}, ${build.getNextBuildNumber()}, ${build.getDependencyIds()});
												});
											</j:if>
										</script>
										<j:if test="${(y + 1 != buildPipelineForm.getGridWidth())}">
											<td class="next"><j:if test="${!(build.getDependencies().length() == 0)}">
													<span class="status next"><img src="${rootURL}/images/24x24/next.png" /></span>
												</j:if></td>
										</j:if>
									</j:if>
									<j:if test="${build == null}">
										<td></td>
										<j:if test="${y + 1 != buildPipelineForm.getGridWidth()}">
											<j:set var="nextIndex" value="${y + 1}" />
											<td class="next"><j:if test="${buildGrid.get(x).containsKey(nextIndex.intValue())}">
													<span class="status next">
														<img src="${rootURL}/images/24x24/next.png" />
													</span>
												</j:if></td>
										</j:if>
									</j:if>
								</j:forEach>
							</tr>
						</j:forEach>
					</tbody>
					<tr class="spacerRow">
						<td colspan="${(buildPipelineForm.getGridWidth() + 1) * 2 - 1}" />
					</tr>
				</j:forEach>
			</table>
		</div>
	</form>
</j:jelly>
